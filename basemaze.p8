pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
--[[
-- maze 15 recursive division
--
]]--
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
_dn,_de,_ds,_dw=1,2,4,8
_sbase=16 -- 16-31 maze n1 e2 s4 w8 if true then draw wall
-- _sbase=32 -- 32-47 maze n1 e2 s4 w8 if true then draw thin wall
-- _sbase=48 -- 48-63 numbers 0-15
-- _sbase=64 -- 64-79 maze n1 e2 s4 w8 if true then draw space
-- _sbase=80 -- 80-95 color blocks



-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
_algo={ --  recursive division
-- control
  nrow=5,
  ncol=5,
  auto_run=false,
  time=0,
  auto_bump=5,--10,
  grid=false,
  start_msg=true,
  state=nil,

  -- generic helper variables
  dx={0,1,0,-1}, -- dx by dir
  dy={-1,0,1,0}, -- dy by dir
  rdir={_dn,_de,_ds,_dw},
  odir={_ds,_dw,_dn,_de},
  i2d={_dn,_de,_ds,_dw},

  -- algo specific


  -- ----------------------------------------------------------------------
  --- main part of the algo
  init=function(self)
    printh("init")
    -- change the state
    self.state=self.st_step 
  end,


  st_step=function(self) -- one step of algo
    printh('step')
    self.state=self.st_fini
  end,

  st_fini=function(self) -- done
    printh('fini')
  end,

  draw=function(self) -- additional drawing
  end,

  -- ----------------------------------------------------------------------
  -- support functions
  -- check if in bounds
  inbnd=function(self,x,y) return x>=0 and y>=0 and x<_algo.ncol and y<_algo.nrow end,

  -- check if done w/maze gen
  done=function(self) return self.state==self.st_fini end,

  full_debug=function (self)
    printh("full debug -----------------------------------")
    for k,v in pairs(self) do
      if type(v)!="function" then
        printh("k="..k.." - "..tostring(v))
        if type(v)=="table" then print_table(v) end
      end
    end
  end,
}

-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====

function print_table(t,_nlc)
  -- nlc = number entries before cr
  if type(t)!="table" then return end
  local out="{"
  local nl=0
  local k,v
  local nlc=_nlc or 5
  for k,v in pairs(t) do
    if type(v) == "table" then
      if type(v[1]) == "table" then
        print_table(v)
        nl=0
      else
        out=out..'('..tblstr(v)..') '
        nl+=1
        if (nl>=nlc) then out=out..'\n' nl=0 end
      end
    else out=out..tostring(v)..' ' end
  end
  out=out.."}"
  printh(out)
end

-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
-- collection of support functions
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function irand(n) return ceil(rnd(n)) end -- rand in [1..n]
function irand0(n) return ceil(rnd(n))-1 end -- rand in [0..n)
function xy2v(_x,_y) return _x+(_y*_algo.ncol) end
function v2xy(_v) return _v%_algo.ncol, flr(_v/_algo.ncol) end
function free(_x,_y) return mget(_x,_y)==0 end
function tblstr(_t) out="" for j=1,#_t-1 do out=out.._t[j].."," end return out.._t[#_t] end
function shuffle(t) for i=#t,1,-1 do local j=flr(rnd(i))+1 t[i],t[j] = t[j],t[i] end end
function contains(_tbl,_el) for _ in all(_tbl) do if _==_el then return true end end return false end

-- highlight x,y map location w/rect of color c
function hilite(x,y,c) local x8=x*8 local y8=y*8 rect(x8+1, y8+1, x8+7,y8+7,c) end
function hifill(x,y,c) -- highlight x,y map location w/rect of color c
  local x8=x*8 local y8=y*8
  --fillp(0x33cc.8)
  fillp(0x5a5a.8) rectfill(x8+1, y8+1, x8+7,y8+7,c) fillp()
end
_rnd_dir = { -- get random dir vector
  dirs={{1,2,3,4},{1,2,4,3},{1,3,2,4},{1,3,4,2},{1,4,2,3},{1,4,3,2},
        {2,1,3,4},{2,1,4,3},{2,3,1,4},{2,3,4,1},{2,4,1,3},{2,4,3,1},
        {3,1,2,4},{3,1,4,2},{3,2,1,4},{3,2,4,1},{3,4,1,2},{3,4,2,1},
        {4,1,2,3},{4,1,3,2},{4,2,1,3},{4,2,3,1},{4,3,1,2},{4,3,2,1}},
  get=function(self) return _rnd_dir.dirs[irand(24)] end,
}
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function init_maze()
  on={0, 0}
  for y=0,_algo.nrow-1 do
    for x=0,_algo.ncol-1 do
      mset(x,y,0)
    end
  end
  _algo:init()
end

-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function _init() --iiiiiii
  -- print a runtime note
  if _algo.start_msg then
    local div,m m=stat(94) if m < 10 then div=":0" else div=":" end
    local siv,s s=stat(95) if s < 10 then siv=":0" else siv=":" end
    printh ('\n\n-------------------- '..stat(93)..div..m..siv..s..' --------------------')
  end
  -- init the map
  init_maze()
end

function _update() --uuuuuuuu

  if btnp(0) then
    --printh("Btn 0 left")
    _algo:state()

  elseif btnp(1) then
    --printh("Btn 1 right")
    _algo.auto_run=not _algo.auto_run

  elseif btnp(2) then 
    --printh("Btn 2 up")
    if _algo:done() then init_maze() end
    while not _algo:done() do _algo:state() end

  elseif btnp(3) then
    --printh("Btn 3 down")
    init_maze()

  elseif btnp(4) then
    --printh("Btn 4 = cv")
    _algo:full_debug()

  elseif btnp(5) then
    --printh("Btn 5 = nm")
    _algo.grid = not _algo.grid
  end

  if _algo.auto_run then
    _algo.time += 1
    if _algo.time > _algo.auto_bump then 
      _algo.time = 0
      if not _algo:done() then _algo:state() end
    end
  end
end

function _draw() --dddddd
  cls()
  mapdraw(0, 0, 0, 0, _algo.ncol, _algo.nrow)
  if _algo.grid then
    fillp(0b1010010110100101.1)
    for y=1,_algo.nrow+1 do
      for x=1,_algo.ncol+1 do
        line((x-1)*8,0 ,(x-1)*8,_algo.nrow*8,6)
      end
      line(0,(y-1)*8,(_algo.ncol)*8-1,(y-1)*8,6)
    end
    fillp()
  end
  
  _algo:draw()
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333330000333333333333000033333333333300003333333333330000333333333333000033333333333300003333333333330000333333333333000033
33333333330000333333333333000033333333333300003333333333330000333333333333000033333333333300003333333333330000333333333333000033
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333333333333333333333333333330000333300003333000033330000333333333333333333333333333333333333000033330000333300003333000033
33333333333333333333333333333333330000333300003333000033330000333333333333333333333333333333333333000033330000333300003333000033
44444444400000044444444440000000444444444000000444444444400000004444444400000004444444440000000044444444000000044444444400000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444444444444444444444444444400000044000000440000000400000004444444444444444444444444444444400000004000000040000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999900000099000099990000999900009000000099990000999900009999000099990000999900090999900099099009099990090999900909000009099990
00900900000009000000090000000900009009000090000000900000009009000090090000900900090900900009009009000090090000900909009009090000
00900900000009000000090000000900009009000090000000900000000009000090090000900900090900900009009009000090090000900909009009090000
00900900000009000099990000099900009999000099990000999900000009000099990000999900090900900009009009099990090099900909999009099990
00900900000009000090000000000900000009000000090000900900000009000090090000000900090900900009009009090000090000900900009009000090
00999900000009000099990000999900000009000099990000999900000009000099990000999900090999900009009009099990090999900900009009099990
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddddddddd0000dddddddddddd0000dddddddddddd0000dddddddddddd000000dddddddddd0000dddddddddddd0000dddddddddddd0000dd00000000
00000000dddddddddd0000dddddddddddd0000dddddddddddd0000dddddddddddd000000dddddddddd0000dddddddddddd0000dddddddddddd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
00000000dd0000dddd0000dddd0000dddddddddddddddddddddddddddddddddddd000000dd000000dd0000dddd0000dddddddddddddddddddddddddd00000000
00000000dd0000dddd0000dddd0000dddddddddddddddddddddddddddddddddddd000000dd000000dd0000dddd0000dddddddddddddddddddddddddd00000000
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
