pico-8 cartridge // http://www.pico-8.com
version 34
__lua__
--[[
  Experminent with tables adding and removing
]]--
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
_dn,_de,_ds,_dw=1,2,4,8
_in,_ie,_is,_iw=1,2,3,4
sbase=16 -- 16=maze
-- sbase=48 -- numbers
-- sbase=80 -- colors

-- control
_ctrl = {
  nrow=3,
  ncol=4,
  free_run=false,
  time=0,
  bump=5,--10,
  grid=true,
  start_msg=true,
}

function experiment()
  function fwd(_x,_y) return _x+(_y*5) end
  function rev(_v) return _v%5, flr(_v/5) end
  function fadd(_t,_x,_y) add(_t, fwd(_x,_y)) end
  function fdel(_t,_v) local r repeat r= del(_t,_v) until r == nil end
  local t, x, y, z
  x=2
  y=3
  v = fwd(x,y)
  x,y=rev(v)
  printh("xyv="..x..','..y..','..v)
  t = {1, 2, 3, 2, 2, 2}
  prt_table(t)
  fadd(t, 2, 3)
  prt_table(t)
  v = del(t,3)
  printh('v='..v)
  v = del(t,3)
  printh('v='..tostr(v))
  prt_table(t)
  fdel(t,2)
  prt_table(t)
end

function experiment_one()
  function fdel(t,v)
    local n=#t
    for i=1,n do
      if t[i]==v then
        t[i]=t[n]
        t[n]=nil
        return
      end
    end
  end
  
  local a
  a={{1,2},{3,4},{5,6},{7,8}}
  prt_table(a)

  --del(a, {3,4}) -- does not work
  --fdel(a, {3,4}) -- does not work
  --del(a,a[2]) -- this one works

  --local p={3,4} -- does not work
  --del(a,p)

  local p
  p = a[3] -- this version works
  del(a,p)
  prt_table(a)
  
  p={1,2}
  local t={1,2}
  printh("p=t is "..tostr(p==t))

  local t={1, 2, 3, 4, 5}
  prt_table(t)
  del(t,3)
  fdel(t,4)
  prt_table(t)
end

-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
_algo={ -- 
  state=nil,
  dx={0,1,0,-1}, -- dx by dir
  dy={-1,0,1,0}, -- dy by dir
  opp={3,4,1,2}, -- opposite direction
  i2d={_dn,_de,_ds,_dw},

  init=function(self)
  end,
  st_step=function(self) -- do one step of the algo
  end,

  st_fini=function(self) -- done
  end,

  done=function(self) return self.state==self.st_fini end,

  draw=function(self) -- additional drawing
  end,

  full_debug=function (self)
    printh("full debug -----------------------------------")
    for k,v in pairs(self) do
      if type(v)!="function" then
        printh("k="..k.." - "..tostring(v))
        if type(v)=="table" then prt_table(v) end
      end
    end
  end,
}

function prt_table(t,_nlc)
  -- nlc = number entries before cr
  if type(t)!="table" then return end
  local out="{"
  local nl=0
  local k,v
  local nlc=_nlc or 5
  for k,v in pairs(t) do
    if type(v) == "table" then
      if type(v[1]) == "table" then
        prt_table(v)
        nl=0
      else
        out=out..'('..tblstr(v)..') '
        nl+=1
        if (nl>=nlc) then out=out..'\n' nl=0 end
      end
    else out=out..tostring(v)..' ' end
  end
  out=out.."}"
  printh(out)
end
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function irand(n) return ceil(rnd(n)) end -- rand in [1..n]
function irand0(n) return ceil(rnd(n))-1 end
function tblstr(_t)
  out="" for j=1,#_t-1 do out=out.._t[j].."," end return out.._t[#_t]
end
function shuffle(t)
  for i=#t,1,-1 do
    local j=flr(rnd(i))+1
    t[i],t[j] = t[j],t[i]
  end
end
-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function init_maze()
  on={0, 0}
  for y=0,_ctrl.nrow-1 do
    for x=0,_ctrl.ncol-1 do
      mset(x,y,0+sbase)
    end
  end
  _algo:init()
  experiment()
end

-- ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== ===== =====
function _init() --iiiiiii
  -- print a runtime note
  if _ctrl.start_msg then
    local div,m m=stat(94) if m < 10 then div=":0" else div=":" end
    local siv,s s=stat(95) if s < 10 then siv=":0" else siv=":" end
    printh (stat(93)..div..m..siv..s.." ---------------------------------------- ")
  end
  -- init the map
  init_maze()
end

function _update() --uuuuuuuu

  if btnp(0) then
    --printh("Btn 0 left")
    _algo:state()

  elseif btnp(1) then
    --printh("Btn 1 right")
    _ctrl.free_run=not _ctrl.free_run

  elseif btnp(2) then 
    --printh("Btn 2 up")
    if _algo:done() then init_maze() end
    while not _algo:done() do _algo:state() end

  elseif btnp(3) then
    --printh("Btn 3 down")
    init_maze()

  elseif btnp(4) then
    --printh("Btn 4 = cv")
    _algo:full_debug()

  elseif btnp(5) then
    --printh("Btn 5 = nm")
    _ctrl.grid = not _ctrl.grid
  end

  if _ctrl.free_run then
    _ctrl.time += 1
    if _ctrl.time > _ctrl.bump then 
      _ctrl.time = 0
      if not _algo:done() then _algo:state() end
    end
  end
end

function _draw() --dddddd
  cls()
  mapdraw(0, 0, 0, 0, _ctrl.ncol, _ctrl.nrow)
  if _ctrl.grid then
    fillp(0b1010010110100101.1)
    for y=1,_ctrl.nrow+1 do
      for x=1,_ctrl.ncol+1 do
        line((x-1)*8,0 ,(x-1)*8,_ctrl.nrow*8,6)
      end
      line(0,(y-1)*8,(_ctrl.ncol)*8-1,(y-1)*8,6)
    end
    fillp()
  end
  _algo:draw()
end

__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333330000333333333333000033333333333300003333333333330000333333333333000033333333333300003333333333330000333333333333000033
33333333330000333333333333000033333333333300003333333333330000333333333333000033333333333300003333333333330000333333333333000033
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333330000333300000033000000330000333300003333000000330000000000003300000033000000000000000000000033000000330000000000000000
33333333333333333333333333333333330000333300003333000033330000333333333333333333333333333333333333000033330000333300003333000033
33333333333333333333333333333333330000333300003333000033330000333333333333333333333333333333333333000033330000333300003333000033
44444444400000044444444440000000444444444000000444444444400000004444444400000004444444440000000044444444000000044444444400000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444400000044000000040000000400000044000000440000000400000000000000400000004000000000000000000000004000000040000000000000000
44444444444444444444444444444444400000044000000440000000400000004444444444444444444444444444444400000004000000040000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999900000099000099990000999900009000000099990000999900009999000099990000999900090999900099099009099990090999900909000009099990
00900900000009000000090000000900009009000090000000900000009009000090090000900900090900900009009009000090090000900909009009090000
00900900000009000000090000000900009009000090000000900000000009000090090000900900090900900009009009000090090000900909009009090000
00900900000009000099990000099900009999000099990000999900000009000099990000999900090900900009009009099990090099900909999009099990
00900900000009000090000000000900000009000000090000900900000009000090090000000900090900900009009009090000090000900900009009000090
00999900000009000099990000999900000009000099990000999900000009000099990000999900090999900009009009099990090999900900009009099990
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddddddddd0000dddddddddddd0000dddddddddddd0000dddddddddddd000000dddddddddd0000dddddddddddd0000dddddddddddd0000dd00000000
00000000dddddddddd0000dddddddddddd0000dddddddddddd0000dddddddddddd000000dddddddddd0000dddddddddddd0000dddddddddddd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
0000000000000000000000dd000000dd0000000000000000000000dd000000dddd000000dd000000dd0000dddd0000dddd000000dd000000dd0000dd00000000
00000000dd0000dddd0000dddd0000dddddddddddddddddddddddddddddddddddd000000dd000000dd0000dddd0000dddddddddddddddddddddddddd00000000
00000000dd0000dddd0000dddd0000dddddddddddddddddddddddddddddddddddd000000dd000000dd0000dddd0000dddddddddddddddddddddddddd00000000
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
00000000111111112222222233333333444444445555555566666666777777778888888899999999aaaaaaaabbbbbbbbccccccccddddddddeeeeeeeeffffffff
